import re
import os
import pkg_resources
from distutils.command.build_ext import build_ext
from distutils.extension import Extension

__all__ = ['RagelExtension', 'build_ragel_ext']


class RagelExtension(Extension):
    Extension.__doc__ + \
        """ragel_include_dirs : [string]

        ragel_extra_args : [string]

        """

    # options mirrored in build_ragel_ext
    def __init__(
            self, name, sources,
            ragel_include_dirs=[],
            ragel_extra_args=[],
            **kwargs):
        self.ragel_include_dirs = ragel_include_dirs
        self.ragel_extra_args = ragel_extra_args

        Extension.__init__(self, name, sources, **kwargs)


class build_ragel_ext(build_ext):

    description = "build C/C++ extensions including files generated by Ragel"

    sep_by = build_ext.sep_by
    user_options = build_ext.user_options
    boolean_options = build_ext.boolean_options
    help_options = build_ext.help_options

    user_options.extend([
        ('ragel-include-dirs=', None,
         "paths on which ragel should search for include files" + sep_by),
        ('ragel-extra-args=', [],
         "extra flags to pass to ragel generator")])

    def initialize_options(self):
        build_ext.initialize_options(self)
        self.ragel_include_dirs = None
        self.ragel_extra_args = None

    def finalize_options(self):
        build_ext.finalize_options(self)
        if self.ragel_include_dirs is None:
            self.ragel_include_dirs = []
        elif isinstance(self.ragel_include_dirs, str):
            self.ragel_include_dirs = self.ragel_include_dirs.split(os.pathsep)
        if self.ragel_extra_args is None:
            self.ragel_extra_args = []

    def build_extension(self, ext):
        def is_ragel_source(source):
            return bool(re.match(r'^(.*)\.rl$', source))

        # split sources into ragel sources and c sources
        ragel_sources = [source for source in ext.sources
                         if is_ragel_source(source)]

        other_sources = [source for source in ext.sources
                         if not is_ragel_source(source)]

        # create a list of generated c sources from the list of ragel files
        generated_sources = [re.sub(r'^(.*)\.rl$', r'\1.c', source)
                             for source in ragel_sources]

        command = ['ragel', '-C']
        command += ['-I',
                    pkg_resources.resource_filename('ragelpyext', 'include')]

        for include_dir in set(ext.ragel_include_dirs +
                               self.ragel_include_dirs):
            command += ['-I', include_dir]

        command += self.ragel_extra_args
        command += ext.ragel_extra_args

        # run ragel on each ragel source
        for source, output in zip(ragel_sources, generated_sources):
            self.spawn(command + ['-o', output, source])

        # delegate to base class to compile everything else
        ext.sources = generated_sources + other_sources
        print(ext.sources)
        build_ext.build_extension(self, ext)
